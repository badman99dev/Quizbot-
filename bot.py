import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, PollAnswerHandler, ContextTypes

# --- ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ---
QUIZ_NAME = "12th Test"
QUESTIONS_PER_QUIZ = 2  # ‡§§‡•Å‡§Æ ‡§á‡§∏‡•á dummy_questions ‡§ï‡•Ä ‡§≤‡§Ç‡§¨‡§æ‡§à ‡§§‡§ï ‡§¨‡§¢‡§º‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã
SECONDS_PER_QUESTION = 15

# --- ‡§°‡§Æ‡•Ä ‡§∏‡§µ‡§æ‡§≤ (Dummy Questions) ---
# ‡§§‡•Å‡§Æ ‡§Ø‡§π‡§æ‡§Å ‡§ú‡§ø‡§§‡§®‡•á ‡§ö‡§æ‡§π‡•ã ‡§â‡§§‡§®‡•á ‡§∏‡§µ‡§æ‡§≤ ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•ã‡•§
# correct_option_id ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ 0 ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à (0 ‡§Æ‡§§‡§≤‡§¨ ‡§™‡§π‡§≤‡§æ ‡§ë‡§™‡•ç‡§∂‡§®, 1 ‡§Æ‡§§‡§≤‡§¨ ‡§¶‡•Ç‡§∏‡§∞‡§æ, etc.)
dummy_questions = [
    {
        "question": "‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§∞‡§æ‡§ú‡§ß‡§æ‡§®‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
        "options": ["‡§Æ‡•Å‡§Ç‡§¨‡§à", "‡§®‡§à ‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä", "‡§ö‡•á‡§®‡•ç‡§®‡§à", "‡§ï‡•ã‡§≤‡§ï‡§æ‡§§‡§æ"],
        "correct_option_id": 1,
    },
    {
        "question": "Python ‡§Æ‡•á‡§Ç ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§∏ ‡§¨‡•ç‡§∞‡•à‡§ï‡•á‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à?",
        "options": ["{}", "()", "[]", "<>"],
        "correct_option_id": 2,
    },
    {
        "question": "‡§∏‡•Ç‡§∞‡•ç‡§Ø ‡§ï‡§ø‡§∏ ‡§¶‡§ø‡§∂‡§æ ‡§Æ‡•á‡§Ç ‡§â‡§ó‡§§‡§æ ‡§π‡•à?",
        "options": ["‡§™‡§∂‡•ç‡§ö‡§ø‡§Æ", "‡§â‡§§‡•ç‡§§‡§∞", "‡§™‡•Ç‡§∞‡•ç‡§µ", "‡§¶‡§ï‡•ç‡§∑‡§ø‡§£"],
        "correct_option_id": 2,
    },
    {
        "question": "1 KB ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡•á ‡§¨‡§æ‡§á‡§ü‡•ç‡§∏ ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç?",
        "options": ["1000", "1024", "2048", "512"],
        "correct_option_id": 1,
    },
    {
        "question": "‡§á‡§®‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ï‡•å‡§® ‡§∏‡§æ ‡§è‡§ï ‡§∏‡§∞‡•ç‡§ö ‡§á‡§Ç‡§ú‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à?",
        "options": ["Google", "Yahoo", "Instagram", "Bing"],
        "correct_option_id": 2,
    }
]

# --- ‡§¨‡•â‡§ü ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï ---

# ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§∏‡•á‡§ü‡§Ö‡§™
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•§ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à‡•§"""
    user = update.effective_user
    context.user_data.clear() # ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç

    keyboard = [[InlineKeyboardButton("‚úÖ I'm ready!", callback_data='start_quiz')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üé≤ Get ready for the quiz '{QUIZ_NAME}'\n\n"
        f"üñä {QUESTIONS_PER_QUIZ} questions\n"
        f"‚è± {SECONDS_PER_QUESTION} seconds per question\n\n"
        f"üèÅ Press the button below when you are ready.",
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡§¨‡§ü‡§® ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    query = update.callback_query
    await query.answer() # ‡§¨‡§ü‡§® ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§æ ‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ‡•á‡§∂‡§®

    if query.data == 'start_quiz':
        await query.edit_message_text(text="üöÄ Starting quiz...")
        await start_countdown_and_quiz(update.effective_chat.id, context)

    elif query.data == 'try_again':
        # ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•à‡§∏‡•á‡§ú ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§≠‡•á‡§ú‡•á‡§Ç
        context.user_data.clear()
        keyboard = [[InlineKeyboardButton("‚úÖ I'm ready!", callback_data='start_quiz')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            f"üé≤ Get ready for the quiz '{QUIZ_NAME}'\n\n"
            f"üñä {QUESTIONS_PER_QUIZ} questions\n"
            f"‚è± {SECONDS_PER_QUESTION} seconds per question\n\n"
            f"üèÅ Press the button below when you are ready.",
            reply_markup=reply_markup
        )
        await query.delete_message()


async def start_countdown_and_quiz(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡§ï‡§æ‡§â‡§Ç‡§ü‡§°‡§æ‡§â‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§´‡§ø‡§∞ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ï‡§æ ‡§™‡§π‡§≤‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à‡•§"""
    # ‡§Ø‡•Ç‡§ú‡§∞ ‡§°‡•á‡§ü‡§æ ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç
    context.user_data['current_question_index'] = 0
    context.user_data['correct_answers'] = 0
    context.user_data['wrong_answers'] = 0
    context.user_data['quiz_start_time'] = asyncio.get_event_loop().time()


    # ‡§ï‡§æ‡§â‡§Ç‡§ü‡§°‡§æ‡§â‡§®
    await context.bot.send_message(chat_id, text="3...")
    await asyncio.sleep(1)
    await context.bot.send_message(chat_id, text="2 READY?...")
    await asyncio.sleep(1)
    await context.bot.send_message(chat_id, text="1 SET...")
    await asyncio.sleep(1)
    await context.bot.send_message(chat_id, text="GO üöÄ")
    
    await send_next_question(chat_id, context)

async def send_next_question(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡§Ö‡§ó‡§≤‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ñ‡§§‡•ç‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    idx = context.user_data.get('current_question_index', 0)

    if idx < QUESTIONS_PER_QUIZ and idx < len(dummy_questions):
        question_data = dummy_questions[idx]
        
        message = await context.bot.send_poll(
            chat_id=chat_id,
            question=question_data["question"],
            options=question_data["options"],
            type='quiz',
            correct_option_id=question_data["correct_option_id"],
            open_period=SECONDS_PER_QUESTION,
            is_anonymous=False # ‡§Ø‡§π ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à PollAnswerHandler ‡§ï‡•á ‡§≤‡§ø‡§è
        )
        
        # ‡§™‡•ã‡§≤ ‡§Ü‡§à‡§°‡•Ä ‡§ï‡•ã ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§π‡§Æ ‡§ú‡§µ‡§æ‡§¨ ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞ ‡§∏‡§ï‡•á‡§Ç
        context.user_data['current_poll_id'] = message.poll.id
    else:
        await show_final_score(chat_id, context)

async def poll_answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    answer = update.poll_answer
    
    # ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ø‡§π ‡§π‡§Æ‡§æ‡§∞‡•á ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ï‡§æ ‡§π‡•Ä ‡§ú‡§µ‡§æ‡§¨ ‡§π‡•à
    if answer.poll_id != context.user_data.get('current_poll_id'):
        return

    # ‡§∏‡§π‡•Ä ‡§ú‡§µ‡§æ‡§¨ ‡§ï‡§æ ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç
    current_idx = context.user_data['current_question_index']
    correct_option_id = dummy_questions[current_idx]['correct_option_id']
    
    # ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    if answer.option_ids and answer.option_ids[0] == correct_option_id:
        context.user_data['correct_answers'] += 1
    else:
        context.user_data['wrong_answers'] += 1

    # ‡§Ö‡§ó‡§≤‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§≠‡•á‡§ú‡•á‡§Ç
    context.user_data['current_question_index'] += 1
    # ‡§•‡•ã‡§°‡§º‡§æ ‡§á‡§Ç‡§§‡§ú‡§º‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§¶‡•á‡§ñ ‡§∏‡§ï‡•á ‡§ï‡§ø ‡§ú‡§µ‡§æ‡§¨ ‡§∏‡§π‡•Ä ‡§•‡§æ ‡§Ø‡§æ ‡§ó‡§≤‡§§
    await asyncio.sleep(1.5) 
    await send_next_question(update.effective_chat.id, context)


async def show_final_score(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ï‡•á ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç ‡§´‡§æ‡§á‡§®‡§≤ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§§‡§æ ‡§π‡•à‡•§"""
    correct = context.user_data.get('correct_answers', 0)
    wrong = context.user_data.get('wrong_answers', 0)
    total_answered = correct + wrong
    missed = QUESTIONS_PER_QUIZ - total_answered

    end_time = asyncio.get_event_loop().time()
    total_time = round(end_time - context.user_data.get('quiz_start_time', end_time))
    
    score_text = (
        f"üèÅ The quiz '{QUIZ_NAME}' has finished!\n\n"
        f"You answered {total_answered} questions:\n\n"
        f"‚úÖ Correct ‚Äì {correct}\n"
        f"‚ùå Wrong ‚Äì {wrong}\n"
        f"‚åõÔ∏è Missed ‚Äì {missed}\n"
        f"‚è± {total_time} sec\n\n"
        "ü•á1st place out of 1." # ‡§Ö‡§≠‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π ‡§∏‡•ç‡§ü‡•à‡§ü‡§ø‡§ï ‡§π‡•à
    )

    keyboard = [[InlineKeyboardButton("üîÑ Try Again", callback_data='try_again')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id, text=score_text, reply_markup=reply_markup)
    context.user_data.clear() # ‡§∏‡•á‡§∂‡§® ‡§ï‡•ç‡§≤‡§ø‡§Ø‡§∞ ‡§ï‡§∞‡•á‡§Ç

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/stop ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡•á ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ï‡•ã ‡§∞‡•ã‡§ï‡§§‡§æ ‡§π‡•à‡•§"""
    await update.message.reply_text("Quiz stopped. Send /start to begin a new one.")
    context.user_data.clear()


def main() -> None:
    """‡§¨‡•â‡§ü ‡§ï‡•ã ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    # ‡§Ö‡§™‡§®‡•á ‡§¨‡•â‡§ü ‡§ï‡§æ ‡§ü‡•ã‡§ï‡§® ‡§Ø‡§π‡§æ‡§Å ‡§°‡§æ‡§≤‡•á‡§Ç
    TOKEN = "8045438791:AAE4KoPRdQmDZ4qZNq4BzMWCEmAm-c6i-ik" # üëà ‡§Ö‡§™‡§®‡§æ ‡§ü‡•ã‡§ï‡§® ‡§Ø‡§π‡§æ‡§Å ‡§°‡§æ‡§≤‡•ã!
    
    application = Application.builder().token(TOKEN).build()

    # ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stop", stop_command))

    # ‡§ï‡•â‡§≤-‡§¨‡•à‡§ï ‡§î‡§∞ ‡§™‡•ã‡§≤ ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(PollAnswerHandler(poll_answer_handler))
    
    # ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§è‡§Å
    application.run_polling()


if __name__ == '__main__':
    main()
